lambda = 1 #peso de Lagrange
model <- MIPModel() %>%
add_variable(x[i, e, j, d, p, k], i = 1 : cri, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor, type = "binary") %>%
#  set_bounds(x[i, e, j, d, p, k] = 0, ) %>% #adicionar condicoes para zerar
#  set_bounds(x[i, e, j, d, p, k] = 1, ) %>% #adicionar condicoes para ser 1
set_objective(sum_expr(1)) %>%
#um medico por crianca
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med) <= 1, i = 1 : cri, e = 1 : 7, d = 1 : 5, p = 1 : 2, k = 1 : hor) %>%
#uma crianca por medico
add_constraint(sum_expr(x[i, e, j, d, p, k], i = 1 : cri) <= 1, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor) %>%
#o atendimento, quando realizado, é feito em um único período
add_constraint(sum_expr(x[i, e, j, d, 1, k], e = 1 : 7, j = 1 : med, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j, d, 2, k], e = 1 : 7, j = 1 : med, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, d = 1 : 5) %>%
#o atendimento da crianca i não deve ocorrer em dias da semana consecutivos
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, e = 1 : 7, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j, d +1, p, k], j = 1 : med, e = 1 : 7, p = 1 : 2, k = 1: hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, d = 1 : 4) %>%
#restricao sobre a quantidade de atendimetno semanal da crianca i
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor) <= AtSem[i, e], i = 1 : cri, e = 1 : 7) %>%
#se um medico j1 inicia o tratamento de uma crianca outros medicos nao podem atende-la
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, j != j1, d = 1 : 5, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j1, d, p, k], d = 1 : 5, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, e = 1 : 7, j1 = 1 : med) %>%
solve_model(with_ROI(solver = "lpsolve"))
get_solution(model, x[i, e, j, d, p , k])
#MODELAGEM
AtSem = matrix(data = 0, nrow = 2, ncol = 7)
AtSem[1,1] = 1
AtSem[1,2] = 2
AtSem[2,1] = 3
AtSem[2,2] = 1
#AtSem[i, e] #atendimento semanal da criança i na especialidade e
cri = 2 #numero de criancas
med = 2 #numero de medicos (o que tem mais medicos)
hor = 2 #numero de horarios (10)
lambda = 1 #peso de Lagrange
model <- MIPModel() %>%
add_variable(x[i, e, j, d, p, k], i = 1 : cri, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor, type = "binary") %>%
#  set_bounds(x[i, e, j, d, p, k] = 0, ) %>% #adicionar condicoes para zerar
#  set_bounds(x[i, e, j, d, p, k] = 1, ) %>% #adicionar condicoes para ser 1
set_objective(sum_expr(1)) %>%
#um medico por crianca
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med) <= 1, i = 1 : cri, e = 1 : 7, d = 1 : 5, p = 1 : 2, k = 1 : hor) %>%
#uma crianca por medico
add_constraint(sum_expr(x[i, e, j, d, p, k], i = 1 : cri) <= 1, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor) %>%
#o atendimento, quando realizado, é feito em um único período
add_constraint(sum_expr(x[i, e, j, d, 1, k], e = 1 : 7, j = 1 : med, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j, d, 2, k], e = 1 : 7, j = 1 : med, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, d = 1 : 5) %>%
#o atendimento da crianca i não deve ocorrer em dias da semana consecutivos
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, e = 1 : 7, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j, d +1, p, k], j = 1 : med, e = 1 : 7, p = 1 : 2, k = 1: hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, d = 1 : 4) %>%
#restricao sobre a quantidade de atendimetno semanal da crianca i
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor) <= AtSem[i, e], i = 1 : cri, e = 1 : 7) %>%
#se um medico j1 inicia o tratamento de uma crianca outros medicos nao podem atende-la
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, j != j1, d = 1 : 5, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j1, d, p, k], d = 1 : 5, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, e = 1 : 7, j1 = 1 : med) %>%
solve_model(with_ROI(solver = "lpsolve", verbose = TRUE))
get_solution(model, x[i, e, j, d, p , k])
#MODELAGEM
AtSem = matrix(data = 0, nrow = 2, ncol = 7)
AtSem[1,1] = 1
AtSem[1,2] = 2
AtSem[2,1] = 3
AtSem[2,2] = 1
#AtSem[i, e] #atendimento semanal da criança i na especialidade e
cri = 2 #numero de criancas
med = 2 #numero de medicos (o que tem mais medicos)
hor = 2 #numero de horarios (10)
lambda = 1 #peso de Lagrange
model <- MIPModel() %>%
add_variable(x[i, e, j, d, p, k], i = 1 : cri, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor, type = "binary") %>%
#  set_bounds(x[i, e, j, d, p, k] = 0, ) %>% #adicionar condicoes para zerar
#  set_bounds(x[i, e, j, d, p, k] = 1, ) %>% #adicionar condicoes para ser 1
set_objective(sum_expr(x[i, e, j, d, p, k], i = 1 : cri, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor) + lambda*sum_expr(sum_expr(x[i, e, j, d1, p, k], j = 1 : med, p = 1 : 2, k = 1 : hor) - AtSem[i, e] - sum_expr(x[i, e, j, d, p, k], p = 1 : 2, k = 1 : hor, j = 1 : med, d = 1 : 5, d != d1), d1 = 1 : 5, e = 1 : 7, i = 1 : cri)) %>%
#um medico por crianca
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med) <= 1, i = 1 : cri, e = 1 : 7, d = 1 : 5, p = 1 : 2, k = 1 : hor) %>%
#uma crianca por medico
add_constraint(sum_expr(x[i, e, j, d, p, k], i = 1 : cri) <= 1, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor) %>%
#o atendimento, quando realizado, é feito em um único período
add_constraint(sum_expr(x[i, e, j, d, 1, k], e = 1 : 7, j = 1 : med, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j, d, 2, k], e = 1 : 7, j = 1 : med, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, d = 1 : 5) %>%
#o atendimento da crianca i não deve ocorrer em dias da semana consecutivos
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, e = 1 : 7, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j, d +1, p, k], j = 1 : med, e = 1 : 7, p = 1 : 2, k = 1: hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, d = 1 : 4) %>%
#restricao sobre a quantidade de atendimetno semanal da crianca i
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor) <= AtSem[i, e], i = 1 : cri, e = 1 : 7) %>%
#se um medico j1 inicia o tratamento de uma crianca outros medicos nao podem atende-la
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, j != j1, d = 1 : 5, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j1, d, p, k], d = 1 : 5, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, e = 1 : 7, j1 = 1 : med) %>%
solve_model(with_ROI(solver = "lpsolve", verbose = TRUE))
get_solution(model, x[i, e, j, d, p , k])
model <- MIPModel() %>%
add_variable(x[i, e, j, d, p, k], i = 1 : cri, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor, type = "binary") %>%
set_objective(sum_expr(x[i, e, j, d, p, k], i = 1 : cri, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor) + lambda*sum_expr(sum_expr(x[i, e, j, d1, p, k], j = 1 : med, p = 1 : 2, k = 1 : hor) - AtSem[i, e] - sum_expr(x[i, e, j, d, p, k], p = 1 : 2, k = 1 : hor, j = 1 : med, d = 1 : 5, d != d1), d1 = 1 : 5, e = 1 : 7, i = 1 : cri)) %>%
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med) <= 1, i = 1 : cri, e = 1 : 7, d = 1 : 5, p = 1 : 2, k = 1 : hor)
model <- MIPModel()
%>%
add_variable(x[i, e, j, d, p, k], i = 1 : cri, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor, type = "binary")
model <- MIPModel() %>%
add_variable(x[i, e, j, d, p, k], i = 1 : cri, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor, type = "binary") %>%
#  set_bounds(x[i, e, j, d, p, k] = 0, ) %>% #adicionar condicoes para zerar
#  set_bounds(x[i, e, j, d, p, k] = 1, ) %>% #adicionar condicoes para ser 1
set_objective(sum_expr(x[i, e, j, d, p, k], i = 1 : cri, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor) + lambda*sum_expr(sum_expr(x[i, e, j, d1, p, k], j = 1 : med, p = 1 : 2, k = 1 : hor) - AtSem[i, e] - sum_expr(x[i, e, j, d, p, k], p = 1 : 2, k = 1 : hor, j = 1 : med, d = 1 : 5, d != d1), d1 = 1 : 5, e = 1 : 7, i = 1 : cri)) %>%
#um medico por crianca
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med) <= 1, i = 1 : cri, e = 1 : 7, d = 1 : 5, p = 1 : 2, k = 1 : hor) %>%
#uma crianca por medico
add_constraint(sum_expr(x[i, e, j, d, p, k], i = 1 : cri) <= 1, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor) %>%
#o atendimento, quando realizado, é feito em um único período
add_constraint(sum_expr(x[i, e, j, d, 1, k], e = 1 : 7, j = 1 : med, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j, d, 2, k], e = 1 : 7, j = 1 : med, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, d = 1 : 5) %>%
#o atendimento da crianca i não deve ocorrer em dias da semana consecutivos
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, e = 1 : 7, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j, d +1, p, k], j = 1 : med, e = 1 : 7, p = 1 : 2, k = 1: hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, d = 1 : 4) %>%
#restricao sobre a quantidade de atendimetno semanal da crianca i
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor) <= AtSem[i, e], i = 1 : cri, e = 1 : 7) %>%
#se um medico j1 inicia o tratamento de uma crianca outros medicos nao podem atende-la
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, j != j1, d = 1 : 5, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j1, d, p, k], d = 1 : 5, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, e = 1 : 7, j1 = 1 : med) %>%
solve_model(with_ROI(solver = "lpsolve", verbose = TRUE))
#MODELAGEM
AtSem = matrix(data = 0, nrow = 2, ncol = 7)
AtSem[1,1] = 1
AtSem[1,2] = 2
AtSem[2,1] = 3
AtSem[2,2] = 1
#AtSem[i, e] #atendimento semanal da criança i na especialidade e
cri = 2 #numero de criancas
med = 2 #numero de medicos (o que tem mais medicos)
hor = 2 #numero de horarios (10)
lambda = 1 #peso de Lagrange
model <- MIPModel() %>%
add_variable(x[i, e, j, d, p, k], i = 1 : cri, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor, type = "binary") %>%
#  set_bounds(x[i, e, j, d, p, k] = 0, ) %>% #adicionar condicoes para zerar
#  set_bounds(x[i, e, j, d, p, k] = 1, ) %>% #adicionar condicoes para ser 1
set_objective(sum_expr(x[i, e, j, d, p, k], i = 1 : cri, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor)) %>%
#um medico por crianca
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med) <= 1, i = 1 : cri, e = 1 : 7, d = 1 : 5, p = 1 : 2, k = 1 : hor) %>%
#uma crianca por medico
add_constraint(sum_expr(x[i, e, j, d, p, k], i = 1 : cri) <= 1, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor) %>%
#o atendimento, quando realizado, é feito em um único período
add_constraint(sum_expr(x[i, e, j, d, 1, k], e = 1 : 7, j = 1 : med, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j, d, 2, k], e = 1 : 7, j = 1 : med, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, d = 1 : 5) %>%
#o atendimento da crianca i não deve ocorrer em dias da semana consecutivos
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, e = 1 : 7, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j, d +1, p, k], j = 1 : med, e = 1 : 7, p = 1 : 2, k = 1: hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, d = 1 : 4) %>%
#restricao sobre a quantidade de atendimetno semanal da crianca i
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor) <= AtSem[i, e], i = 1 : cri, e = 1 : 7) %>%
#se um medico j1 inicia o tratamento de uma crianca outros medicos nao podem atende-la
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, j != j1, d = 1 : 5, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j1, d, p, k], d = 1 : 5, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, e = 1 : 7, j1 = 1 : med) %>%
solve_model(with_ROI(solver = "lpsolve", verbose = TRUE))
get_solution(model, x[i, e, j, d, p , k])
#MODELAGEM
AtSem = matrix(data = 0, nrow = 2, ncol = 7)
AtSem[1,1] = 1
AtSem[1,2] = 2
AtSem[2,1] = 3
AtSem[2,2] = 1
#AtSem[i, e] #atendimento semanal da criança i na especialidade e
cri = 2 #numero de criancas
med = 2 #numero de medicos (o que tem mais medicos)
hor = 2 #numero de horarios (10)
lambda = 1 #peso de Lagrange
model <- MIPModel() %>%
add_variable(x[i, e, j, d, p, k], i = 1 : cri, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor, type = "binary") %>%
#  set_bounds(x[i, e, j, d, p, k] = 0, ) %>% #adicionar condicoes para zerar
#  set_bounds(x[i, e, j, d, p, k] = 1, ) %>% #adicionar condicoes para ser 1
set_objective(sum_expr(x[i, e, j, d, p, k], i = 1 : cri, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor), "max") %>%
#um medico por crianca
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med) <= 1, i = 1 : cri, e = 1 : 7, d = 1 : 5, p = 1 : 2, k = 1 : hor) %>%
#uma crianca por medico
add_constraint(sum_expr(x[i, e, j, d, p, k], i = 1 : cri) <= 1, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor) %>%
#o atendimento, quando realizado, é feito em um único período
add_constraint(sum_expr(x[i, e, j, d, 1, k], e = 1 : 7, j = 1 : med, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j, d, 2, k], e = 1 : 7, j = 1 : med, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, d = 1 : 5) %>%
#o atendimento da crianca i não deve ocorrer em dias da semana consecutivos
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, e = 1 : 7, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j, d +1, p, k], j = 1 : med, e = 1 : 7, p = 1 : 2, k = 1: hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, d = 1 : 4) %>%
#restricao sobre a quantidade de atendimetno semanal da crianca i
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor) <= AtSem[i, e], i = 1 : cri, e = 1 : 7) %>%
#se um medico j1 inicia o tratamento de uma crianca outros medicos nao podem atende-la
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, j != j1, d = 1 : 5, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j1, d, p, k], d = 1 : 5, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, e = 1 : 7, j1 = 1 : med) %>%
solve_model(with_ROI(solver = "lpsolve", verbose = TRUE))
get_solution(model, x[i, e, j, d, p , k])
#MODELAGEM
AtSem = matrix(data = 0, nrow = 2, ncol = 7)
AtSem[1,1] = 1
AtSem[1,2] = 2
AtSem[2,1] = 3
AtSem[2,2] = 1
#AtSem[i, e] #atendimento semanal da criança i na especialidade e
cri = 2 #numero de criancas
med = 2 #numero de medicos (o que tem mais medicos)
hor = 2 #numero de horarios (10)
lambda = 1 #peso de Lagrange
model <- MIPModel() %>%
add_variable(x[i, e, j, d, p, k], i = 1 : cri, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor, type = "binary") %>%
#  set_bounds(x[i, e, j, d, p, k] = 0, ) %>% #adicionar condicoes para zerar
#  set_bounds(x[i, e, j, d, p, k] = 1, ) %>% #adicionar condicoes para ser 1
set_objective(sum_expr(x[i, e, j, d, p, k], i = 1 : cri, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1, 2, k = 1 : hor), "max") %>%
#um medico por crianca
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med) <= 1, i = 1 : cri, e = 1 : 7, d = 1 : 5, p = 1 : 2, k = 1 : hor) %>%
#uma crianca por medico
add_constraint(sum_expr(x[i, e, j, d, p, k], i = 1 : cri) <= 1, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor) %>%
#o atendimento, quando realizado, é feito em um único período
add_constraint(sum_expr(x[i, e, j, d, 1, k], e = 1 : 7, j = 1 : med, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j, d, 2, k], e = 1 : 7, j = 1 : med, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, d = 1 : 5) %>%
#o atendimento da crianca i não deve ocorrer em dias da semana consecutivos
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, e = 1 : 7, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j, d +1, p, k], j = 1 : med, e = 1 : 7, p = 1 : 2, k = 1: hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, d = 1 : 4) %>%
#restricao sobre a quantidade de atendimetno semanal da crianca i
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor) <= AtSem[i, e], i = 1 : cri, e = 1 : 7) %>%
#se um medico j1 inicia o tratamento de uma crianca outros medicos nao podem atende-la
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, j != j1, d = 1 : 5, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j1, d, p, k], d = 1 : 5, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, e = 1 : 7, j1 = 1 : med) %>%
solve_model(with_ROI(solver = "lpsolve", verbose = TRUE))
get_solution(model, x[i, e, j, d, p , k])
#MODELAGEM
AtSem = matrix(data = 0, nrow = 2, ncol = 7)
AtSem[1,1] = 1
AtSem[1,2] = 2
AtSem[2,1] = 3
AtSem[2,2] = 1
#AtSem[i, e] #atendimento semanal da criança i na especialidade e
cri = 2 #numero de criancas
med = 2 #numero de medicos (o que tem mais medicos)
hor = 2 #numero de horarios (10)
lambda = 1 #peso de Lagrange
model <- MIPModel() %>%
add_variable(x[i, e, j, d, p, k], i = 1 : cri, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1, 2, k = 1 : hor, type = "binary") %>%
#  set_bounds(x[i, e, j, d, p, k] = 0, ) %>% #adicionar condicoes para zerar
#  set_bounds(x[i, e, j, d, p, k] = 1, ) %>% #adicionar condicoes para ser 1
set_objective(sum_expr(x[i, e, j, d, p, k], i = 1 : cri, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor), "max") %>%
#um medico por crianca
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med) <= 1, i = 1 : cri, e = 1 : 7, d = 1 : 5, p = 1 : 2, k = 1 : hor) %>%
#uma crianca por medico
add_constraint(sum_expr(x[i, e, j, d, p, k], i = 1 : cri) <= 1, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor) %>%
#o atendimento, quando realizado, é feito em um único período
add_constraint(sum_expr(x[i, e, j, d, 1, k], e = 1 : 7, j = 1 : med, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j, d, 2, k], e = 1 : 7, j = 1 : med, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, d = 1 : 5) %>%
#o atendimento da crianca i não deve ocorrer em dias da semana consecutivos
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, e = 1 : 7, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j, d +1, p, k], j = 1 : med, e = 1 : 7, p = 1 : 2, k = 1: hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, d = 1 : 4) %>%
#restricao sobre a quantidade de atendimetno semanal da crianca i
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor) <= AtSem[i, e], i = 1 : cri, e = 1 : 7) %>%
#se um medico j1 inicia o tratamento de uma crianca outros medicos nao podem atende-la
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, j != j1, d = 1 : 5, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j1, d, p, k], d = 1 : 5, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, e = 1 : 7, j1 = 1 : med) %>%
solve_model(with_ROI(solver = "lpsolve", verbose = TRUE))
get_solution(model, x[i, e, j, d, p , k])
#MODELAGEM
AtSem = matrix(data = 0, nrow = 2, ncol = 7)
AtSem[1,1] = 1
AtSem[1,2] = 2
AtSem[2,1] = 3
AtSem[2,2] = 1
#AtSem[i, e] #atendimento semanal da criança i na especialidade e
cri = 2 #numero de criancas
med = 2 #numero de medicos (o que tem mais medicos)
hor = 2 #numero de horarios (10)
lambda = 1 #peso de Lagrange
model <- MIPModel() %>%
add_variable(x[i, e, j, d, p, k], i = 1:cri, e = 1:7, j = 1:med, d = 1:5, p = 1:2, k = 1:hor, type = "binary") %>%
#  set_bounds(x[i, e, j, d, p, k] = 0, ) %>% #adicionar condicoes para zerar
#  set_bounds(x[i, e, j, d, p, k] = 1, ) %>% #adicionar condicoes para ser 1
set_objective(sum_expr(x[i, e, j, d, p, k], i = 1 : cri, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor), "max") %>%
#um medico por crianca
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med) <= 1, i = 1 : cri, e = 1 : 7, d = 1 : 5, p = 1 : 2, k = 1 : hor) %>%
#uma crianca por medico
add_constraint(sum_expr(x[i, e, j, d, p, k], i = 1 : cri) <= 1, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor) %>%
#o atendimento, quando realizado, é feito em um único período
add_constraint(sum_expr(x[i, e, j, d, 1, k], e = 1 : 7, j = 1 : med, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j, d, 2, k], e = 1 : 7, j = 1 : med, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, d = 1 : 5) %>%
#o atendimento da crianca i não deve ocorrer em dias da semana consecutivos
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, e = 1 : 7, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j, d +1, p, k], j = 1 : med, e = 1 : 7, p = 1 : 2, k = 1: hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, d = 1 : 4) %>%
#restricao sobre a quantidade de atendimetno semanal da crianca i
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor) <= AtSem[i, e], i = 1 : cri, e = 1 : 7) %>%
#se um medico j1 inicia o tratamento de uma crianca outros medicos nao podem atende-la
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, j != j1, d = 1 : 5, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j1, d, p, k], d = 1 : 5, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, e = 1 : 7, j1 = 1 : med) %>%
solve_model(with_ROI(solver = "lpsolve", verbose = TRUE))
get_solution(model, x[i, e, j, d, p , k])
#MODELAGEM
AtSem = matrix(data = 0, nrow = 2, ncol = 7)
AtSem[1,1] = 1
AtSem[1,2] = 2
AtSem[2,1] = 3
AtSem[2,2] = 1
#AtSem[i, e] #atendimento semanal da criança i na especialidade e
cri = 2 #numero de criancas
med = 2 #numero de medicos (o que tem mais medicos)
hor = 2 #numero de horarios (10)
lambda = 1 #peso de Lagrange
model <- MIPModel() %>%
add_variable(x[i, e, j, d, p, k], i = 1:cri, e = 1:7, j = 1:med, d = 1:5, p = 1:2, k = 1:hor, type = "binary") %>%
#  set_bounds(x[i, e, j, d, p, k] = 0, ) %>% #adicionar condicoes para zerar
#  set_bounds(x[i, e, j, d, p, k] = 1, ) %>% #adicionar condicoes para ser 1
set_objective(sum_expr(x[i, e, j, d, p, k], i = 1 : cri, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor), "max") %>%
#um medico por crianca
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med) <= 1, i = 1 : cri, e = 1 : 7, d = 1 : 5, p = 1 : 2, k = 1 : hor) %>%
#uma crianca por medico
add_constraint(sum_expr(x[i, e, j, d, p, k], i = 1 : cri) <= 1, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor) %>%
#o atendimento, quando realizado, é feito em um único período
add_constraint(sum_expr(x[i, e, j, d, 1, k], e = 1 : 7, j = 1 : med, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j, d, 2, k], e = 1 : 7, j = 1 : med, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, d = 1 : 5) %>%
#o atendimento da crianca i não deve ocorrer em dias da semana consecutivos
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, e = 1 : 7, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j, d +1, p, k], j = 1 : med, e = 1 : 7, p = 1 : 2, k = 1: hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, d = 1 : 4) %>%
#restricao sobre a quantidade de atendimetno semanal da crianca i
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor) <= AtSem[i, e], i = 1 : cri, e = 1 : 7) %>%
#se um medico j1 inicia o tratamento de uma crianca outros medicos nao podem atende-la
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, j != j1, d = 1 : 5, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j1, d, p, k], d = 1 : 5, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, e = 1 : 7, j1 = 1 : med) %>%
solve_model(with_ROI(solver = "lpsolve", verbose = TRUE))
get_solution(model, x[i, e, j, d, p , k])
View(model)
model
#MODELAGEM
AtSem = matrix(data = 0, nrow = 2, ncol = 7)
AtSem[1,1] = 1
AtSem[1,2] = 2
AtSem[2,1] = 3
AtSem[2,2] = 1
#AtSem[i, e] #atendimento semanal da criança i na especialidade e
cri = 2 #numero de criancas
med = 2 #numero de medicos (o que tem mais medicos)
hor = 2 #numero de horarios (10)
lambda = 1 #peso de Lagrange
model <- MIPModel() %>%
add_variable(x[i, e, j, d, p, k], i = 1:cri, e = 1:7, j = 1:med, d = 1:5, p = 1:2, k = 1:hor, type = "binary") %>%
#  set_bounds(x[i, e, j, d, p, k] = 0, ) %>% #adicionar condicoes para zerar
#  set_bounds(x[i, e, j, d, p, k] = 1, ) %>% #adicionar condicoes para ser 1
set_objective(sum_expr(x[i, e, j, d, p, k], i = 1 : cri, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor), "max") %>%
#um medico por crianca
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med) <= 1, i = 1 : cri, e = 1 : 7, d = 1 : 5, p = 1 : 2, k = 1 : hor) %>%
#uma crianca por medico
add_constraint(sum_expr(x[i, e, j, d, p, k], i = 1 : cri) <= 1, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor) %>%
#o atendimento, quando realizado, é feito em um único período
add_constraint(sum_expr(x[i, e, j, d, 1, k], e = 1 : 7, j = 1 : med, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j, d, 2, k], e = 1 : 7, j = 1 : med, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, d = 1 : 5) %>%
#o atendimento da crianca i não deve ocorrer em dias da semana consecutivos
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, e = 1 : 7, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j, d +1, p, k], j = 1 : med, e = 1 : 7, p = 1 : 2, k = 1: hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, d = 1 : 4) %>%
#restricao sobre a quantidade de atendimetno semanal da crianca i
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor) <= AtSem[i, e], i = 1 : cri, e = 1 : 7) %>%
#se um medico j1 inicia o tratamento de uma crianca outros medicos nao podem atende-la
add_constraint(sum_expr(x[i, e, j, d, p, k], j = 1 : med, j != j1, d = 1 : 5, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7) <= 1 - sum_expr(x[i, e, j1, d, p, k], d = 1 : 5, p = 1 : 2, k = 1 : hor) / sum_expr(AtSem[i, e], e = 1 : 7), i = 1 : cri, e = 1 : 7, j1 = 1 : med) %>%
solve_model(with_ROI(solver = "lpsolve", verbose = TRUE))
model
model <- MIPModel()
add_variable(model, x[i, e, j, d, p, k], i = 1:cri, e = 1:7, j = 1:med, d = 1:5, p = 1:2, k = 1:hor, type = "binary")
#  set_bounds(x[i, e, j, d, p, k] = 0, ) %>% #adicionar condicoes para zerar
#  set_bounds(x[i, e, j, d, p, k] = 1, ) %>% #adicionar condicoes para ser 1
set_objective(model, sum_expr(x[i, e, j, d, p, k], i = 1 : cri, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor), "max")
#  set_bounds(x[i, e, j, d, p, k] = 0, ) %>% #adicionar condicoes para zerar
#  set_bounds(x[i, e, j, d, p, k] = 1, ) %>% #adicionar condicoes para ser 1
set_objective(sum_expr(x[i, e, j, d, p, k], i = 1 : cri, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor), "max")
model
model <- MIPModel()
add_variable(model, x[i, e, j, d, p, k], i = 1:cri, e = 1:7, j = 1:med, d = 1:5, p = 1:2, k = 1:hor, type = "binary")
#  set_bounds(x[i, e, j, d, p, k] = 0, ) %>% #adicionar condicoes para zerar
#  set_bounds(x[i, e, j, d, p, k] = 1, ) %>% #adicionar condicoes para ser 1
set_objective(model, sum_expr(x[i, e, j, d, p, k], i = 1 : cri, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor), "max")
model
model <- MIPModel()
add_variable(model, x[i, e, j, d, p, k], i = 1:cri, e = 1:7, j = 1:med, d = 1:5, p = 1:2, k = 1:hor, type = "binary")
set_objective(model, sum_expr(x[i, e, j, d, p, k], i = 1 : cri, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor), "max")
model <- MIPModel()
add_variable(model, x[i, e, j, d, p, k], i = 1:cri, e = 1:7, j = 1:med, d = 1:5, p = 1:2, k = 1:hor, type = "binary")
set_objective(sum_expr(x[i, e, j, d, p, k], i = 1 : cri, e = 1 : 7, j = 1 : med, d = 1 : 5, p = 1 : 2, k = 1 : hor), "max")
View(model)
r <- MIPModel() %>%
add_variable(x[i], i = 1:2) %>%
set_objective(sum_expr(x[i], i = 1:2)) %>%
add_constraint(x[i] <= 3, i = 1:2) %>%
solve_model(solver = "lpsolve", verbose = TRUE) %>%
get_solution(x[i])
library(readxl) #pacote de leitura arquivos excel
library(dplyr) #pacote para manipulação de dados
library(tidyr) #pacote com estrutura de dados
library(lubridate) #pacote para trabalhar com datas e horarios
library(ompr) #pacote de modelagem algebrica
library(lpSolve) #pacote com solver de programação linear inteira
library(rmarkdown) #pacote para exportar
library(ROI)
library(ROI.plugin.glpk)
library(ROI.plugin.lpsolve)
library(ompr.roi)
r <- MIPModel() %>%
add_variable(x[i], i = 1:2) %>%
set_objective(sum_expr(x[i], i = 1:2)) %>%
add_constraint(x[i] <= 3, i = 1:2) %>%
solve_model(solver = "lpsolve", verbose = TRUE) %>%
get_solution(x[i])
r <- MIPModel() %>%
add_variable(x[i], i = 1:2) %>%
set_objective(sum_expr(x[i], i = 1:2)) %>%
add_constraint(x[i] <= 3, i = 1:2) %>%
solve_model(solver = "lpsolve") %>%
get_solution(x[i])
r <- MIPModel() %>%
add_variable(x[i], i = 1:2) %>%
set_objective(sum_expr(x[i], i = 1:2)) %>%
add_constraint(x[i] <= 3, i = 1:2) %>%
solve_model(solver = "lpsolve") %>%
get_solution(x[i])
r <- MIPModel() %>%
add_variable(x[i], i = 1:2) %>%
set_objective(sum_expr(x[i], i = 1:2)) %>%
add_constraint(x[i] <= 3, i = 1:2) %>%
solve_model(solver = "lpsolve", verbose = TRUE)
r <- MIPModel() %>%
add_variable(x[i], i = 1:2) %>%
set_objective(sum_expr(x[i], i = 1:2)) %>%
add_constraint(x[i] <= 3, i = 1:2) %>%
solve_model(solver = "lpsolve")
r <- MIPModel() %>%
add_variable(x[i], i = 1:2) %>%
set_objective(sum_expr(x[i], i = 1:2)) %>%
add_constraint(x[i] <= 3, i = 1:2) %>%
solve_model(r, solver = "lpsolve")
r <- MIPModel() %>%
add_variable(x[i], i = 1:2) %>%
set_objective(sum_expr(x[i], i = 1:2)) %>%
add_constraint(x[i] <= 3, i = 1:2)
solve_model(r, solver = "lpsolve")
r <- MIPModel() %>%
add_variable(x[i], i = 1:2) %>%
set_objective(sum_expr(x[i], i = 1:2)) %>%
add_constraint(x[i] <= 3, i = 1:2) %>%
solve_model(with_ROI("lpsolve"), verbose = TRUE)
r <- MIPModel() %>%
add_variable(x[i], i = 1:2) %>%
set_objective(sum_expr(x[i], i = 1:2)) %>%
add_constraint(x[i] <= 3, i = 1:2) %>%
solve_model(with_ROI("lpsolve")) %>%
get_solution(x[i])
r <- MIPModel() %>%
add_variable(x[i], i = 1:2) %>%
set_objective(sum_expr(x[i], i = 1:2)) %>%
add_constraint(x[i] <= 3, i = 1:2) %>%
solve_model(with_ROI("lpsolve")) %>%
get_solution(x[i])
View(x)
r <- MIPModel() %>%
add_variable(x[i], i = 1:2) %>%
set_objective(sum_expr(x[i], i = 1:2)) %>%
add_constraint(x[i] <= 3, i = 1:2) %>%
solve_model(with_ROI("lpsolve")) %>%
get_solution(r, x[i])
result <- MIPModel() %>%
add_variable(x[i], i = 1:5) %>%
add_variable(y[i, j], i = 1:5, j = 1:5) %>%
add_constraint(x[i] >= 1, i = 1:5) %>%
set_bounds(x[i], lb = 3, i = 1:3) %>%
set_objective(0) %>%
solve_model(with_ROI("glpk"))
solution <- get_solution(result, x[i])
solution2 <- get_solution(result, y[i, 1])
solution3 <- get_solution(result, y[i, j])
result <- MIPModel() %>%
add_variable(x[i], i = 1:5) %>%
add_variable(y[i, j], i = 1:5, j = 1:5) %>%
add_constraint(x[i] >= 1, i = 1:5) %>%
set_bounds(x[i], lb = 3, i = 1:3) %>%
set_objective(0) %>%
solve_model(with_ROI("glpk", verbose = TRUE))
solution <- get_solution(result, x[i])
solution2 <- get_solution(result, y[i, 1])
solution3 <- get_solution(result, y[i, j])
result <- MIPModel() %>%
add_variable(x[i], i = 1:5) %>%
add_variable(y[i, j], i = 1:5, j = 1:5) %>%
add_constraint(x[i] >= 1, i = 1:5) %>%
set_bounds(x[i], lb = 3, i = 1:3) %>%
set_objective(0) %>%
solve_model(with_ROI("lpsolve", verbose = TRUE))
solution <- get_solution(result, x[i])
solution2 <- get_solution(result, y[i, 1])
solution3 <- get_solution(result, y[i, j])
View(solution)
View(solution)
View(solution2)
View(solution3)
result <- MIPModel() %>%
add_variable(x[i], i = 1:5) %>%
add_constraint(x[i] >= 1, i = 1:5) %>%
set_bounds(x[i], lb = 3, i = 1:3) %>%
set_objective(0) %>%
solve_model(with_ROI("lpsolve", verbose = TRUE))
result <- MIPModel() %>%
add_variable(x[i], i = 1:5) %>%
add_constraint(x[i] >= 1, i = 1:5) %>%
set_bounds(x[i], lb = 3, i = 1:3) %>%
set_objective(sum_expr(x[i], i = 1:5)) %>%
solve_model(with_ROI("lpsolve", verbose = TRUE))
result <- MIPModel() %>%
add_variable(x[i], i = 1:5) %>%
add_constraint(x[i] >= 1, i = 1:5) %>%
set_bounds(x[i], lb = 3, i = 1:3) %>%
set_objective(sum_expr(x[i], i = 1:5)) %>%
solve_model(with_ROI("lpsolve", verbose = TRUE))
solution <- get_solution(result, x[i])
solution2 <- get_solution(result, y[i, 1])
solution3 <- get_solution(result, y[i, j])
solution <- get_solution(result, x[i])
solution <- get_solution(result, x[i])
result <- MIPModel() %>%
add_variable(x[i], i = 1:5) %>%
add_constraint(x[i] >= 1, i = 1:5) %>%
set_bounds(x[i], lb = 3, i = 1:3) %>%
set_objective(sum_expr(x[i], i = 1:5)) %>%
solve_model(with_ROI("lpsolve", verbose = TRUE))
solution <- get_solution(result, x[i])
get_solution(result, x[i])
result <- MIPModel() %>%
add_variable(x[i], i = 1:5) %>%
add_constraint(x[i] >= 1, i = 1:5) %>%
set_bounds(x[i], lb = 3, i = 1:3) %>%
set_objective(sum_expr(x[i], i = 1:5)) %>%
solve_model(with_ROI("lpsolve", verbose = TRUE))
get_solution(result, x[i])
result <- MIPModel() %>%
add_variable(x[i], i = 1:5) %>%
add_constraint(x[i] >= 1, i = 1:5) %>%
set_bounds(x[i], ub = 3, i = 1:3) %>%
set_objective(sum_expr(x[i], i = 1:5)) %>%
solve_model(with_ROI("lpsolve", verbose = TRUE))
get_solution(result, x[i])
result <- MIPModel() %>%
add_variable(x[i], i = 1:5) %>%
add_constraint(x[i] >= 1, i = 1:5) %>%
set_bounds(x[i], ub = 3, i = 1:3) %>%
set_objective(sum_expr(x[i], i = 1:3)) %>%
solve_model(with_ROI("lpsolve", verbose = TRUE))
get_solution(result, x[i])
result <- MIPModel() %>%
add_variable(x[i], i = 1:5) %>%
add_constraint(x[i] >= 1, i = 1:5) %>%
set_bounds(x[i], ub = 3, i = 1:3) %>%
set_objective(sum_expr(x[i], i = 1:3)) %>%
solve_model(with_ROI("lpsolve", verbose = TRUE))
solu <- get_solution(result, x[i])
View(solu)
