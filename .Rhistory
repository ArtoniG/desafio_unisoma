add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], per=1:numper, hor=1:numhor) <= 1 - sum_expr(x[cri, esp, funcio1, dia1, per, hor], per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, funcio1=1:numfuncio, dia=1:numdia, dia1=1:numdia) %>%
#O atendimento da crianca i na especialidade e e feito por apenas um medico
#  add_constraint(x[cri, esp, funcio, dia, per, hor]<=1-x[cri, esp, funcio1, dia1, per1, hor1], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, funcio1=1:numfuncio, funcio1 != funcio, dia1=1:numdia, per1=1:numper, hor1=1:numhor) %>%
#usar o pacote lpsolve para resolver o problema
solve_model(with_ROI(solver = "lpsolve"))
#guarda a solucao encontrada no objeto sol
sol <- get_solution(model, x[cri, esp, funcio, dia, per, hor])
View(model)
View(sol)
#cria um modelo
model <- MIPModel() %>%
#adiciona variaveis
add_variable(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, type = "binary") %>%
#adiciona uma funcao objetivo
set_objective(sum_expr(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor),"max") %>%
#adiciona a restricao de um medico por crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, funcio=1:numfuncio)<=1, cri=1:numcri, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao de uma crianca por medico
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, cri=1:numcri)<=1, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao da quantidade de atendimento semanal da crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) <= AtSem[cri,esp], cri=1:numcri, esp=1:numesp) %>%
#O atendimento, quando realizado, ocorre em um único período e não há atendimentos consecutivos na mesma especialidade
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor) <= 1 - sum_expr(x[cri, esp1, funcio, dia, (per+1), hor], funcio=1:numfuncio, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:numdia, per=1:(numper-1)) %>%
#O atendimento da crianca não deve ocorrer em dias da semana consecutivos
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor, per=1:numper) <= 1 - sum_expr(x[cri, esp1, funcio, (dia+1), per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:(numdia-1)) %>%
#TESTE O atendimento da crianca i na especialidade e e feito por apenas um medico
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], per=1:numper, hor=1:numhor) <= 1 - sum_expr(x[cri, esp, funcio1, dia1, per, hor], per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, funcio1=1:numfuncio, dia=1:numdia, dia1=1:numdia, dia1 != dia) %>%
#O atendimento da crianca i na especialidade e e feito por apenas um medico
#  add_constraint(x[cri, esp, funcio, dia, per, hor]<=1-x[cri, esp, funcio1, dia1, per1, hor1], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, funcio1=1:numfuncio, funcio1 != funcio, dia1=1:numdia, per1=1:numper, hor1=1:numhor) %>%
#usar o pacote lpsolve para resolver o problema
solve_model(with_ROI(solver = "lpsolve"))
#MODELAGEM
numcri = 5 #numero de criancas
numesp = 2 #quantidade de especialidades
numfuncio = 2 #numero de funcionarios (especialidade que possui mais funcionarios)
numdia = 3 #numero de dias de trabalho na semana
numper = 2 #divisoes em periodos do dia (manha e tarde)
numhor = 2 #quantos horarios existe em cada periodo (o periodo com maior quantidade de horarios)
AtSem <- matrix(data = 2, nrow = numcri, ncol = numesp) #matriz de quantidde de atendimento semanal da crianca i na esp e
AtSem[1,1] = 1
AtSem[1,2] = 1
AtSem[2,2] = 0
AtSem[2,1] = 0
AtSem[3,1] = 1
AtSem[3,2] = 1
lambda = 0.005 #peso da preferencia que minimiza o numero de viagens das criancas até a ONG
#lambda*sum_expr(1-x[cri, esp, funcio, dia, per, hor]-x[cri, esp1, funcio1, dia1, per1, hor1], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, esp1=1:numesp, funcio1=1:numfuncio, dia1=1:numdia, dia1 != dia, per1=1:numper, hor1=1:numhor)+
#lambda*sum_expr(1-x[cri, esp, funcio, dia, per, hor]-x[cri, esp1, funcio1, dia1, per1, hor1], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, esp1=1:numesp, funcio1=1:numfuncio, dia1=1:numdia, dia1 != dia, per1=1:numper, hor1=1:numhor)+
#O atendimento da crianca não deve ocorrer em dias da semana consecutivos
#  add_constraint(x[cri, esp, funcio, dia, per, hor] <= 1 - x[cri, esp1, funcio1, (dia+1), per1, hor1],cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:(numdia-1), per=1:numper, hor=1:numhor, esp1=1:numesp, funcio1=1:numfuncio, per1=1:numper, hor1=1:numhor) %>%
#O atendimento, quando realizado, é feito e um único periodo
#  add_constraint(x[cri, esp, funcio, dia, per, hor] <= 1-x[cri, esp1, funcio1, dia, (per+1), hor1], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:(numper-1), hor=1:numhor, esp1=1:numesp, funcio1=1:numfuncio, hor1=1:numhor) %>%
#Nao e possivel fazer dois agendamentos consecutivos na mesma especialidade
#  add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor)<=1 , cri=1:numcri, esp=1:numesp, dia=1:numdia, per=1:numper) %>%
#   set_bounds(x[i, e, j, d, p, k], lb = 1) %>% #adicionar condicoes para zerar
#   set_bounds(x[i, e, j, d, p, k], ub = 0) %>% #adicionar condicoes para ser 1
#cria um modelo
model <- MIPModel() %>%
#adiciona variaveis
add_variable(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, type = "binary") %>%
#adiciona uma funcao objetivo
set_objective(sum_expr(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor),"max") %>%
#adiciona a restricao de um medico por crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, funcio=1:numfuncio)<=1, cri=1:numcri, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao de uma crianca por medico
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, cri=1:numcri)<=1, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao da quantidade de atendimento semanal da crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) <= AtSem[cri,esp], cri=1:numcri, esp=1:numesp) %>%
#O atendimento, quando realizado, ocorre em um único período e não há atendimentos consecutivos na mesma especialidade
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor) <= 1 - sum_expr(x[cri, esp1, funcio, dia, (per+1), hor], funcio=1:numfuncio, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:numdia, per=1:(numper-1)) %>%
#O atendimento da crianca não deve ocorrer em dias da semana consecutivos
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor, per=1:numper) <= 1 - sum_expr(x[cri, esp1, funcio, (dia+1), per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:(numdia-1)) %>%
#TESTE O atendimento da crianca i na especialidade e e feito por apenas um medico
#  add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], per=1:numper, hor=1:numhor) <= 1 - sum_expr(x[cri, esp, funcio1, dia1, per, hor], per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, funcio1=1:numfuncio, dia=1:numdia, dia1=1:numdia, dia1 != dia) %>%
#O atendimento da crianca i na especialidade e e feito por apenas um medico
add_constraint(x[cri, esp, funcio, dia, per, hor]<=1-x[cri, esp, funcio1, dia1, per1, hor1], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, funcio1=1:numfuncio, funcio1 != funcio, dia1=1:numdia, per1=1:numper, hor1=1:numhor) %>%
#usar o pacote lpsolve para resolver o problema
solve_model(with_ROI(solver = "lpsolve"))
#guarda a solucao encontrada no objeto sol
sol <- get_solution(model, x[cri, esp, funcio, dia, per, hor])
View(model)
View(sol)
library(shiny) #pacote de visualizacao UI
library(Rcpp)
library(sqldf)
library(readxl) #pacote de leitura arquivos excel
library(dplyr) #pacote para manipulação de dados
library(tidyr) #pacote com estrutura de dados
library(lubridate) #pacote para trabalhar com datas e horarios
library(ompr) #pacote de modelagem algebrica
library(ompr.roi) #pacote para conectar modelagem ao solver
library(ROI) #pacote para conectar modelagem ao solver
library(ROI.plugin.lpsolve) #pacote para conectar modelagem ao solver
library(lpSolve) #pacote com solver de programação linear inteira
library(rmarkdown) #pacote para exportar
library(magrittr)
#MODELAGEM
numcri = 5 #numero de criancas
numesp = 2 #quantidade de especialidades
numfuncio = 2 #numero de funcionarios (especialidade que possui mais funcionarios)
numdia = 3 #numero de dias de trabalho na semana
numper = 2 #divisoes em periodos do dia (manha e tarde)
numhor = 2 #quantos horarios existe em cada periodo (o periodo com maior quantidade de horarios)
AtSem <- matrix(data = 2, nrow = numcri, ncol = numesp) #matriz de quantidde de atendimento semanal da crianca i na esp e
AtSem[1,1] = 1
AtSem[1,2] = 1
AtSem[2,2] = 0
AtSem[2,1] = 0
AtSem[3,1] = 1
AtSem[3,2] = 1
lambda = 0.005 #peso da preferencia que minimiza o numero de viagens das criancas até a ONG
#lambda*sum_expr(1-x[cri, esp, funcio, dia, per, hor]-x[cri, esp1, funcio1, dia1, per1, hor1], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, esp1=1:numesp, funcio1=1:numfuncio, dia1=1:numdia, dia1 != dia, per1=1:numper, hor1=1:numhor)+
#cria um modelo
model <- MIPModel() %>%
#adiciona variaveis
add_variable(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, type = "binary") %>%
#adiciona uma funcao objetivo
set_objective(sum_expr(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor),"max") %>%
#adiciona a restricao de um medico por crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, funcio=1:numfuncio)<=1, cri=1:numcri, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao de uma crianca por medico
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, cri=1:numcri)<=1, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao da quantidade de atendimento semanal da crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) <= AtSem[cri,esp], cri=1:numcri, esp=1:numesp) %>%
#O atendimento, quando realizado, ocorre em um único período e não há atendimentos consecutivos na mesma especialidade
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor) <= 1 - sum_expr(x[cri, esp1, funcio, dia, (per+1), hor], funcio=1:numfuncio, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:numdia, per=1:(numper-1)) %>%
#O atendimento da crianca não deve ocorrer em dias da semana consecutivos
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor, per=1:numper) <= 1 - sum_expr(x[cri, esp1, funcio, (dia+1), per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:(numdia-1)) %>%
#TESTE O atendimento da crianca i na especialidade e e feito por apenas um medico
#  add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], per=1:numper, hor=1:numhor) <= 1 - sum_expr(x[cri, esp, funcio1, dia1, per, hor], per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, funcio1=1:numfuncio, dia=1:numdia, dia1=1:numdia, dia1 != dia) %>%
#O atendimento da crianca i na especialidade e e feito por apenas um medico
add_constraint(x[cri, esp, funcio, dia, per, hor]<=1-x[cri, esp, funcio1, dia1, per1, hor1], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, funcio1=1:numfuncio, funcio1 != funcio, dia1=1:numdia, per1=1:numper, hor1=1:numhor) %>%
#usar o pacote lpsolve para resolver o problema
solve_model(with_ROI(solver = "lpsolve"))
#guarda a solucao encontrada no objeto sol
sol <- get_solution(model, x[cri, esp, funcio, dia, per, hor])
View(model)
View(sol)
#cria um modelo
model <- MIPModel() %>%
#adiciona variaveis
add_variable(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, type = "binary") %>%
#adiciona uma funcao objetivo
set_objective(lambda*sum_expr(1 - sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor)-sum_expr(x[cri, esp1, funcio, dia1, per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:numdia, dia1=1:numdia, dia1!=dia)+sum_expr(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor),"max") %>%
#adiciona a restricao de um medico por crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, funcio=1:numfuncio)<=1, cri=1:numcri, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao de uma crianca por medico
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, cri=1:numcri)<=1, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao da quantidade de atendimento semanal da crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) <= AtSem[cri,esp], cri=1:numcri, esp=1:numesp) %>%
#O atendimento, quando realizado, ocorre em um único período e não há atendimentos consecutivos na mesma especialidade
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor) <= 1 - sum_expr(x[cri, esp1, funcio, dia, (per+1), hor], funcio=1:numfuncio, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:numdia, per=1:(numper-1)) %>%
#O atendimento da crianca não deve ocorrer em dias da semana consecutivos
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor, per=1:numper) <= 1 - sum_expr(x[cri, esp1, funcio, (dia+1), per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:(numdia-1)) %>%
#TESTE O atendimento da crianca i na especialidade e e feito por apenas um medico
#  add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], per=1:numper, hor=1:numhor) <= 1 - sum_expr(x[cri, esp, funcio1, dia1, per, hor], per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, funcio1=1:numfuncio, dia=1:numdia, dia1=1:numdia, dia1 != dia) %>%
#O atendimento da crianca i na especialidade e e feito por apenas um medico
add_constraint(x[cri, esp, funcio, dia, per, hor]<=1-x[cri, esp, funcio1, dia1, per1, hor1], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, funcio1=1:numfuncio, funcio1 != funcio, dia1=1:numdia, per1=1:numper, hor1=1:numhor) %>%
#usar o pacote lpsolve para resolver o problema
solve_model(with_ROI(solver = "lpsolve"))
#guarda a solucao encontrada no objeto sol
sol <- get_solution(model, x[cri, esp, funcio, dia, per, hor])
View(model)
lambda = 1 #peso da preferencia que minimiza o numero de viagens das criancas até a ONG
#cria um modelo
model <- MIPModel() %>%
#adiciona variaveis
add_variable(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, type = "binary") %>%
#adiciona uma funcao objetivo
set_objective(lambda*sum_expr(1 - sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor)-sum_expr(x[cri, esp1, funcio, dia1, per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:numdia, dia1=1:numdia, dia1!=dia)+sum_expr(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor),"max") %>%
#adiciona a restricao de um medico por crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, funcio=1:numfuncio)<=1, cri=1:numcri, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao de uma crianca por medico
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, cri=1:numcri)<=1, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao da quantidade de atendimento semanal da crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) <= AtSem[cri,esp], cri=1:numcri, esp=1:numesp) %>%
#O atendimento, quando realizado, ocorre em um único período e não há atendimentos consecutivos na mesma especialidade
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor) <= 1 - sum_expr(x[cri, esp1, funcio, dia, (per+1), hor], funcio=1:numfuncio, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:numdia, per=1:(numper-1)) %>%
#O atendimento da crianca não deve ocorrer em dias da semana consecutivos
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor, per=1:numper) <= 1 - sum_expr(x[cri, esp1, funcio, (dia+1), per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:(numdia-1)) %>%
#TESTE O atendimento da crianca i na especialidade e e feito por apenas um medico
#  add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], per=1:numper, hor=1:numhor) <= 1 - sum_expr(x[cri, esp, funcio1, dia1, per, hor], per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, funcio1=1:numfuncio, dia=1:numdia, dia1=1:numdia, dia1 != dia) %>%
#O atendimento da crianca i na especialidade e e feito por apenas um medico
add_constraint(x[cri, esp, funcio, dia, per, hor]<=1-x[cri, esp, funcio1, dia1, per1, hor1], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, funcio1=1:numfuncio, funcio1 != funcio, dia1=1:numdia, per1=1:numper, hor1=1:numhor) %>%
#usar o pacote lpsolve para resolver o problema
solve_model(with_ROI(solver = "lpsolve"))
#guarda a solucao encontrada no objeto sol
sol <- get_solution(model, x[cri, esp, funcio, dia, per, hor])
View(model)
lambda = 0,1 #peso da preferencia que minimiza o numero de viagens das criancas até a ONG
lambda = 0.1 #peso da preferencia que minimiza o numero de viagens das criancas até a ONG
#cria um modelo
model <- MIPModel() %>%
#adiciona variaveis
add_variable(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, type = "binary") %>%
#adiciona uma funcao objetivo
set_objective(lambda*sum_expr(1 - sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor)-sum_expr(x[cri, esp1, funcio, dia1, per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:numdia, dia1=1:numdia, dia1!=dia)+sum_expr(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor),"max") %>%
#adiciona a restricao de um medico por crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, funcio=1:numfuncio)<=1, cri=1:numcri, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao de uma crianca por medico
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, cri=1:numcri)<=1, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao da quantidade de atendimento semanal da crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) <= AtSem[cri,esp], cri=1:numcri, esp=1:numesp) %>%
#O atendimento, quando realizado, ocorre em um único período e não há atendimentos consecutivos na mesma especialidade
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor) <= 1 - sum_expr(x[cri, esp1, funcio, dia, (per+1), hor], funcio=1:numfuncio, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:numdia, per=1:(numper-1)) %>%
#O atendimento da crianca não deve ocorrer em dias da semana consecutivos
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor, per=1:numper) <= 1 - sum_expr(x[cri, esp1, funcio, (dia+1), per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:(numdia-1)) %>%
#TESTE O atendimento da crianca i na especialidade e e feito por apenas um medico
#  add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], per=1:numper, hor=1:numhor) <= 1 - sum_expr(x[cri, esp, funcio1, dia1, per, hor], per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, funcio1=1:numfuncio, dia=1:numdia, dia1=1:numdia, dia1 != dia) %>%
#O atendimento da crianca i na especialidade e e feito por apenas um medico
add_constraint(x[cri, esp, funcio, dia, per, hor]<=1-x[cri, esp, funcio1, dia1, per1, hor1], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, funcio1=1:numfuncio, funcio1 != funcio, dia1=1:numdia, per1=1:numper, hor1=1:numhor) %>%
#usar o pacote lpsolve para resolver o problema
solve_model(with_ROI(solver = "lpsolve"))
#guarda a solucao encontrada no objeto sol
sol <- get_solution(model, x[cri, esp, funcio, dia, per, hor])
View(model)
View(sol)
lambda = 0.5 #peso da preferencia que minimiza o numero de viagens das criancas até a ONG
#cria um modelo
model <- MIPModel() %>%
#adiciona variaveis
add_variable(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, type = "binary") %>%
#adiciona uma funcao objetivo
set_objective(lambda*sum_expr(1 - sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor)-sum_expr(x[cri, esp1, funcio, dia1, per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:numdia, dia1=1:numdia, dia1!=dia)+sum_expr(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor),"max") %>%
#adiciona a restricao de um medico por crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, funcio=1:numfuncio)<=1, cri=1:numcri, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao de uma crianca por medico
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, cri=1:numcri)<=1, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao da quantidade de atendimento semanal da crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) <= AtSem[cri,esp], cri=1:numcri, esp=1:numesp) %>%
#O atendimento, quando realizado, ocorre em um único período e não há atendimentos consecutivos na mesma especialidade
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor) <= 1 - sum_expr(x[cri, esp1, funcio, dia, (per+1), hor], funcio=1:numfuncio, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:numdia, per=1:(numper-1)) %>%
#O atendimento da crianca não deve ocorrer em dias da semana consecutivos
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor, per=1:numper) <= 1 - sum_expr(x[cri, esp1, funcio, (dia+1), per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:(numdia-1)) %>%
#TESTE O atendimento da crianca i na especialidade e e feito por apenas um medico
#  add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], per=1:numper, hor=1:numhor) <= 1 - sum_expr(x[cri, esp, funcio1, dia1, per, hor], per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, funcio1=1:numfuncio, dia=1:numdia, dia1=1:numdia, dia1 != dia) %>%
#O atendimento da crianca i na especialidade e e feito por apenas um medico
add_constraint(x[cri, esp, funcio, dia, per, hor]<=1-x[cri, esp, funcio1, dia1, per1, hor1], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, funcio1=1:numfuncio, funcio1 != funcio, dia1=1:numdia, per1=1:numper, hor1=1:numhor) %>%
#usar o pacote lpsolve para resolver o problema
solve_model(with_ROI(solver = "lpsolve"))
#guarda a solucao encontrada no objeto sol
sol <- get_solution(model, x[cri, esp, funcio, dia, per, hor])
View(model)
View(sol)
View(model)
lambda = 0.1 #peso da preferencia que minimiza o numero de viagens das criancas até a ONG
lambda = 0.001 #peso da preferencia que minimiza o numero de viagens das criancas até a ONG
#cria um modelo
model <- MIPModel() %>%
#adiciona variaveis
add_variable(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, type = "binary") %>%
#adiciona uma funcao objetivo
set_objective(lambda*sum_expr(1-x[cri, esp, funcio, dia, per, hor]-x[cri, esp1, funcio1, dia1, per1, hor1], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, esp1=1:numesp, funcio1=1:numfuncio, dia1=1:numdia, dia1 != dia, per1=1:numper, hor1=1:numhor)+sum_expr(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor),"max") %>%
#adiciona a restricao de um medico por crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, funcio=1:numfuncio)<=1, cri=1:numcri, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao de uma crianca por medico
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, cri=1:numcri)<=1, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao da quantidade de atendimento semanal da crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) <= AtSem[cri,esp], cri=1:numcri, esp=1:numesp) %>%
#O atendimento, quando realizado, ocorre em um único período e não há atendimentos consecutivos na mesma especialidade
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor) <= 1 - sum_expr(x[cri, esp1, funcio, dia, (per+1), hor], funcio=1:numfuncio, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:numdia, per=1:(numper-1)) %>%
#O atendimento da crianca não deve ocorrer em dias da semana consecutivos
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor, per=1:numper) <= 1 - sum_expr(x[cri, esp1, funcio, (dia+1), per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:(numdia-1)) %>%
#TESTE O atendimento da crianca i na especialidade e e feito por apenas um medico
#  add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], per=1:numper, hor=1:numhor) <= 1 - sum_expr(x[cri, esp, funcio1, dia1, per, hor], per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, funcio1=1:numfuncio, dia=1:numdia, dia1=1:numdia, dia1 != dia) %>%
#O atendimento da crianca i na especialidade e e feito por apenas um medico
add_constraint(x[cri, esp, funcio, dia, per, hor]<=1-x[cri, esp, funcio1, dia1, per1, hor1], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, funcio1=1:numfuncio, funcio1 != funcio, dia1=1:numdia, per1=1:numper, hor1=1:numhor) %>%
#usar o pacote lpsolve para resolver o problema
solve_model(with_ROI(solver = "lpsolve"))
#cria um modelo
model <- MIPModel() %>%
#adiciona variaveis
add_variable(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, type = "binary") %>%
#adiciona uma funcao objetivo
set_objective(lambda*sum_expr(1-x[cri, esp, funcio, dia, per, hor]-x[cri, esp1, funcio1, dia1, per1, hor1], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, esp1=1:numesp, funcio1=1:numfuncio, dia1=1:numdia, dia1 != dia, per1=1:numper, hor1=1:numhor)+sum_expr(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor),"max") %>%
#adiciona a restricao de um medico por crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, funcio=1:numfuncio)<=1, cri=1:numcri, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao de uma crianca por medico
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, cri=1:numcri)<=1, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao da quantidade de atendimento semanal da crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) <= AtSem[cri,esp], cri=1:numcri, esp=1:numesp) %>%
#O atendimento, quando realizado, ocorre em um único período e não há atendimentos consecutivos na mesma especialidade
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor) <= 1 - sum_expr(x[cri, esp1, funcio, dia, (per+1), hor], funcio=1:numfuncio, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:numdia, per=1:(numper-1)) %>%
#O atendimento da crianca não deve ocorrer em dias da semana consecutivos
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor, per=1:numper) <= 1 - sum_expr(x[cri, esp1, funcio, (dia+1), per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:(numdia-1)) %>%
#TESTE O atendimento da crianca i na especialidade e e feito por apenas um medico
#  add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], per=1:numper, hor=1:numhor) <= 1 - sum_expr(x[cri, esp, funcio1, dia1, per, hor], per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, funcio1=1:numfuncio, dia=1:numdia, dia1=1:numdia, dia1 != dia) %>%
#O atendimento da crianca i na especialidade e e feito por apenas um medico
add_constraint(x[cri, esp, funcio, dia, per, hor]<=1-x[cri, esp, funcio1, dia1, per1, hor1], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, funcio1=1:numfuncio, funcio1 != funcio, dia1=1:numdia, per1=1:numper, hor1=1:numhor) %>%
#usar o pacote lpsolve para resolver o problema
solve_model(with_ROI(solver = "lpsolve"))
#guarda a solucao encontrada no objeto sol
sol <- get_solution(model, x[cri, esp, funcio, dia, per, hor])
View(model)
View(sol)
lambda = 1 #peso da preferencia que minimiza o numero de viagens das criancas até a ONG
#cria um modelo
model <- MIPModel() %>%
#adiciona variaveis
add_variable(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, type = "binary") %>%
#adiciona uma funcao objetivo
set_objective(sum_expr(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor),"max") %>%
#adiciona a restricao de um medico por crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, funcio=1:numfuncio)<=1, cri=1:numcri, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao de uma crianca por medico
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, cri=1:numcri)<=1, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao da quantidade de atendimento semanal da crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) <= AtSem[cri,esp], cri=1:numcri, esp=1:numesp) %>%
#O atendimento, quando realizado, ocorre em um único período e não há atendimentos consecutivos na mesma especialidade
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor) <= 1 - sum_expr(x[cri, esp1, funcio, dia, (per+1), hor], funcio=1:numfuncio, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:numdia, per=1:(numper-1)) %>%
#O atendimento da crianca não deve ocorrer em dias da semana consecutivos
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor, per=1:numper) <= 1 - sum_expr(x[cri, esp1, funcio, (dia+1), per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:(numdia-1)) %>%
#TESTE O atendimento da crianca i na especialidade e e feito por apenas um medico
#  add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], per=1:numper, hor=1:numhor) <= 1 - sum_expr(x[cri, esp, funcio1, dia1, per, hor], per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, funcio1=1:numfuncio, dia=1:numdia, dia1=1:numdia, dia1 != dia) %>%
#O atendimento da crianca i na especialidade e e feito por apenas um medico
add_constraint(x[cri, esp, funcio, dia, per, hor]<=1-x[cri, esp, funcio1, dia1, per1, hor1], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, funcio1=1:numfuncio, funcio1 != funcio, dia1=1:numdia, per1=1:numper, hor1=1:numhor) %>%
#usar o pacote lpsolve para resolver o problema
solve_model(with_ROI(solver = "lpsolve"))
#guarda a solucao encontrada no objeto sol
sol <- get_solution(model, x[cri, esp, funcio, dia, per, hor])
#guarda a solucao encontrada no objeto sol
sol <- get_solution(model, x[cri, esp, funcio, dia, per, hor])
#MODELAGEM
numcri = 7 #numero de criancas
numesp = 3 #quantidade de especialidades
numfuncio = 2 #numero de funcionarios (especialidade que possui mais funcionarios)
numdia = 3 #numero de dias de trabalho na semana
numper = 1 #divisoes em periodos do dia (manha e tarde)
numhor = 2 #quantos horarios existe em cada periodo (o periodo com maior quantidade de horarios)
AtSem <- matrix(data = 2, nrow = numcri, ncol = numesp) #matriz de quantidde de atendimento semanal da crianca i na esp e
lambda = 1 #peso da preferencia que minimiza o numero de viagens das criancas até a ONG
#lambda*sum_expr(1-x[cri, esp, funcio, dia, per, hor]-x[cri, esp1, funcio1, dia1, per1, hor1], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, esp1=1:numesp, funcio1=1:numfuncio, dia1=1:numdia, dia1 != dia, per1=1:numper, hor1=1:numhor)+
#lambda*sum_expr(1 - sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor)-sum_expr(x[cri, esp1, funcio, dia1, per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:numdia, dia1=1:numdia, dia1!=dia)+
library(shiny) #pacote de visualizacao UI
library(Rcpp)
library(sqldf)
library(readxl) #pacote de leitura arquivos excel
library(dplyr) #pacote para manipulação de dados
library(tidyr) #pacote com estrutura de dados
library(lubridate) #pacote para trabalhar com datas e horarios
library(ompr) #pacote de modelagem algebrica
library(ompr.roi) #pacote para conectar modelagem ao solver
library(ROI) #pacote para conectar modelagem ao solver
library(ROI.plugin.lpsolve) #pacote para conectar modelagem ao solver
library(lpSolve) #pacote com solver de programação linear inteira
library(rmarkdown) #pacote para exportar
library(magrittr)
#MODELAGEM
numcri = 7 #numero de criancas
numesp = 3 #quantidade de especialidades
numfuncio = 2 #numero de funcionarios (especialidade que possui mais funcionarios)
numdia = 3 #numero de dias de trabalho na semana
numper = 1 #divisoes em periodos do dia (manha e tarde)
numhor = 2 #quantos horarios existe em cada periodo (o periodo com maior quantidade de horarios)
AtSem <- matrix(data = 2, nrow = numcri, ncol = numesp) #matriz de quantidde de atendimento semanal da crianca i na esp e
lambda = 1 #peso da preferencia que minimiza o numero de viagens das criancas até a ONG
#lambda*sum_expr(1-x[cri, esp, funcio, dia, per, hor]-x[cri, esp1, funcio1, dia1, per1, hor1], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, esp1=1:numesp, funcio1=1:numfuncio, dia1=1:numdia, dia1 != dia, per1=1:numper, hor1=1:numhor)+
#lambda*sum_expr(1 - sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor)-sum_expr(x[cri, esp1, funcio, dia1, per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:numdia, dia1=1:numdia, dia1!=dia)+
#O atendimento da crianca não deve ocorrer em dias da semana consecutivos
#  add_constraint(x[cri, esp, funcio, dia, per, hor] <= 1 - x[cri, esp1, funcio1, (dia+1), per1, hor1],cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:(numdia-1), per=1:numper, hor=1:numhor, esp1=1:numesp, funcio1=1:numfuncio, per1=1:numper, hor1=1:numhor) %>%
#O atendimento, quando realizado, é feito e um único periodo
#  add_constraint(x[cri, esp, funcio, dia, per, hor] <= 1-x[cri, esp1, funcio1, dia, (per+1), hor1], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:(numper-1), hor=1:numhor, esp1=1:numesp, funcio1=1:numfuncio, hor1=1:numhor) %>%
#Nao e possivel fazer dois agendamentos consecutivos na mesma especialidade
#  add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor)<=1 , cri=1:numcri, esp=1:numesp, dia=1:numdia, per=1:numper) %>%
#O atendimento da crianca i na especialidade e e feito por apenas um medico
#  add_constraint(x[cri, esp, funcio, dia, per, hor]<=1-x[cri, esp, funcio1, dia1, per1, hor1], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, funcio1=1:numfuncio, funcio1 != funcio, dia1=1:numdia, per1=1:numper, hor1=1:numhor) %>%
#cria um modelo
model <- MIPModel() %>%
#adiciona variaveis
add_variable(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, type = "binary") %>%
#adiciona uma funcao objetivo
set_objective(sum_expr(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor),"max") %>%
#adiciona a restricao de um medico por crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, funcio=1:numfuncio)<=1, cri=1:numcri, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao de uma crianca por medico
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, cri=1:numcri)<=1, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao da quantidade de atendimento semanal da crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) <= AtSem[cri,esp], cri=1:numcri, esp=1:numesp) %>%
#O atendimento, quando realizado, ocorre em um único período e não há atendimentos consecutivos na mesma especialidade
#  add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor) <= 1 - sum_expr(x[cri, esp1, funcio, dia, (per+1), hor], funcio=1:numfuncio, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:numdia, per=1:(numper-1)) %>%
#O atendimento da crianca não deve ocorrer em dias da semana consecutivos
#  add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor, per=1:numper) <= 1 - sum_expr(x[cri, esp1, funcio, (dia+1), per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:(numdia-1)) %>%
#O atendimento da crianca i na especialidade e e feito por apenas um medico
add_constraint(sum_expr(x[cri, esp, funcio1, dia, per, hor], per=1:numper, hor=1:numhor) <= 1 - sum_expr(x[cri, esp, funcio, dia1, per, hor], per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, dia=1:numdia, dia1=1:numdia, funcio1=1:numfuncio, funcio=1:numfuncio, funcio != funcio1) %>%
#TESTE TODO O ATENDIMENTO DA CRIANCA i OCORRE NO MESMO DIA
#  add_constraint(sum_expr(x[cri, esp, funcio, dia1, per, hor], per=1:numper, hor=1:numhor)<=1-sum_expr(x[cri, esp1, funcio1, dia, per, hor], per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, funcio=1:numfuncio, funcio1=1:numfuncio, dia1=1:numdia, dia=1:numdia, dia!=dia1) %>%
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], per=1:numper, hor=1:numhor) <= 1 - sum_expr(x[cri, esp1, funcio1, dia1, per, hor], per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, funcio=1:numfuncio, funcio1=1:numfuncio, dia=1:numdia, dia1=1:numdia, dia1 != dia) %>%
#usar o pacote lpsolve para resolver o problema
solve_model(with_ROI(solver = "lpsolve"))
#guarda a solucao encontrada no objeto sol
sol <- get_solution(model, x[cri, esp, funcio, dia, per, hor])
View(model)
View(sol)
#MODELAGEM
numcri = 7 #numero de criancas
numesp = 3 #quantidade de especialidades
numfuncio = 2 #numero de funcionarios (especialidade que possui mais funcionarios)
numdia = 3 #numero de dias de trabalho na semana
numper = 2 #divisoes em periodos do dia (manha e tarde)
numhor = 2 #quantos horarios existe em cada periodo (o periodo com maior quantidade de horarios)
AtSem <- matrix(data = 2, nrow = numcri, ncol = numesp) #matriz de quantidde de atendimento semanal da crianca i na esp e
#lambda = 0.005 #peso da preferencia que minimiza o numero de viagens das criancas até a ONG
lambda = 1/numcri*numesp^2*numfuncio^2*numdia*(numdia-1)
#MODELAGEM
numcri = 7 #numero de criancas
numesp = 3 #quantidade de especialidades
numfuncio = 2 #numero de funcionarios (especialidade que possui mais funcionarios)
numdia = 3 #numero de dias de trabalho na semana
numper = 2 #divisoes em periodos do dia (manha e tarde)
numhor = 2 #quantos horarios existe em cada periodo (o periodo com maior quantidade de horarios)
AtSem <- matrix(data = 2, nrow = numcri, ncol = numesp) #matriz de quantidde de atendimento semanal da crianca i na esp e
#lambda = 0.005 #peso da preferencia que minimiza o numero de viagens das criancas até a ONG
lambda = 1/(numcri*(numesp*numfuncio)^2*numdia*(numdia-1))
library(shiny) #pacote de visualizacao UI
library(Rcpp)
library(sqldf)
library(readxl) #pacote de leitura arquivos excel
library(dplyr) #pacote para manipulação de dados
library(tidyr) #pacote com estrutura de dados
library(lubridate) #pacote para trabalhar com datas e horarios
library(ompr) #pacote de modelagem algebrica
library(ompr.roi) #pacote para conectar modelagem ao solver
library(ROI) #pacote para conectar modelagem ao solver
library(ROI.plugin.lpsolve) #pacote para conectar modelagem ao solver
library(lpSolve) #pacote com solver de programação linear inteira
library(rmarkdown) #pacote para exportar
library(magrittr)
numesp = 2 #quantidade de especialidades
#MODELAGEM
numcri = 7 #numero de criancas
numesp = 2 #quantidade de especialidades
numfuncio = 2 #numero de funcionarios (especialidade que possui mais funcionarios)
numdia = 3 #numero de dias de trabalho na semana
numper = 2 #divisoes em periodos do dia (manha e tarde)
numhor = 2 #quantos horarios existe em cada periodo (o periodo com maior quantidade de horarios)
AtSem <- matrix(data = 2, nrow = numcri, ncol = numesp) #matriz de quantidde de atendimento semanal da crianca i na esp e
#lambda = 0.005 #peso da preferencia que minimiza o numero de viagens das criancas até a ONG
lambda = 1/(numcri*(numesp*numfuncio)^2*numdia*(numdia-1))
#lambda*sum_expr(1-x[cri, esp, funcio, dia, per, hor]-x[cri, esp1, funcio1, dia1, per1, hor1], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, esp1=1:numesp, funcio1=1:numfuncio, dia1=1:numdia, dia1 != dia, per1=1:numper, hor1=1:numhor)+
#lambda*sum_expr(1 - sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor)-sum_expr(x[cri, esp1, funcio, dia1, per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:numdia, dia1=1:numdia, dia1!=dia)+
#O ATENDIMENTO DA CRIANCA i OCORRE NO MESMO DIA
# add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], per=1:numper, hor=1:numhor) <= 1 - sum_expr(x[cri, esp1, funcio1, dia1, per, hor], per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, funcio=1:numfuncio, funcio1=1:numfuncio, dia=1:numdia, dia1=1:numdia, dia1 != dia) %>%
#lambda*sum_expr(1 - sum_expr(x[cri, esp, funcio, dia, per, hor], per=1:numper, hor=1:numhor) - sum_expr(x[cri, esp1, funcio1, dia1, per, hor], per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, funcio=1:numfuncio, funcio1=1:numfuncio, dia=1:numdia, dia1=1:numdia, dia1 != dia)+
#O atendimento da crianca não deve ocorrer em dias da semana consecutivos
#  add_constraint(x[cri, esp, funcio, dia, per, hor] <= 1 - x[cri, esp1, funcio1, (dia+1), per1, hor1],cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:(numdia-1), per=1:numper, hor=1:numhor, esp1=1:numesp, funcio1=1:numfuncio, per1=1:numper, hor1=1:numhor) %>%
#O atendimento, quando realizado, é feito e um único periodo
#  add_constraint(x[cri, esp, funcio, dia, per, hor] <= 1-x[cri, esp1, funcio1, dia, (per+1), hor1], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:(numper-1), hor=1:numhor, esp1=1:numesp, funcio1=1:numfuncio, hor1=1:numhor) %>%
#Nao e possivel fazer dois agendamentos consecutivos na mesma especialidade
#cria um modelo
model <- MIPModel() %>%
#adiciona variaveis
add_variable(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, type = "binary") %>%
#adiciona uma funcao objetivo
set_objective(lambda*sum_expr(1 - sum_expr(x[cri, esp, funcio, dia, per, hor], per=1:numper, hor=1:numhor) - sum_expr(x[cri, esp1, funcio1, dia1, per, hor], per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, funcio=1:numfuncio, funcio1=1:numfuncio, dia=1:numdia, dia1=1:numdia, dia1 != dia)+sum_expr(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor),"max") %>%
#adiciona a restricao de um medico por crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, funcio=1:numfuncio)<=1, cri=1:numcri, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao de uma crianca por medico
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, cri=1:numcri)<=1, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao da quantidade de atendimento semanal da crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) <= AtSem[cri,esp], cri=1:numcri, esp=1:numesp) %>%
#O atendimento, quando realizado, ocorre em um único período e não há atendimentos consecutivos na mesma especialidade
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor) <= 1 - sum_expr(x[cri, esp1, funcio, dia, (per+1), hor], funcio=1:numfuncio, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:numdia, per=1:(numper-1)) %>%
#O atendimento da crianca não deve ocorrer em dias da semana consecutivos
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor, per=1:numper) <= 1 - sum_expr(x[cri, esp1, funcio, (dia+1), per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:(numdia-1)) %>%
#O atendimento da crianca i na especialidade e e feito por apenas um medico
add_constraint(sum_expr(x[cri, esp, funcio1, dia, per, hor], per=1:numper, hor=1:numhor) <= 1 - sum_expr(x[cri, esp, funcio, dia1, per, hor], per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, dia=1:numdia, dia1=1:numdia, funcio1=1:numfuncio, funcio=1:numfuncio, funcio != funcio1) %>%
#usar o pacote lpsolve para resolver o problema
solve_model(with_ROI(solver = "lpsolve"))
#guarda a solucao encontrada no objeto sol
sol <- get_solution(model, x[cri, esp, funcio, dia, per, hor])
View(model)
View(sol)
numdia = 5 #numero de dias de trabalho na semana
#MODELAGEM
numcri = 7 #numero de criancas
numesp = 2 #quantidade de especialidades
numfuncio = 2 #numero de funcionarios (especialidade que possui mais funcionarios)
numdia = 5 #numero de dias de trabalho na semana
numper = 2 #divisoes em periodos do dia (manha e tarde)
numhor = 2 #quantos horarios existe em cada periodo (o periodo com maior quantidade de horarios)
AtSem <- matrix(data = 2, nrow = numcri, ncol = numesp) #matriz de quantidde de atendimento semanal da crianca i na esp e
#lambda = 0.005 #peso da preferencia que minimiza o numero de viagens das criancas até a ONG
lambda = 1/(numcri*(numesp*numfuncio)^2*numdia*(numdia-1))
#lambda*sum_expr(1-x[cri, esp, funcio, dia, per, hor]-x[cri, esp1, funcio1, dia1, per1, hor1], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, esp1=1:numesp, funcio1=1:numfuncio, dia1=1:numdia, dia1 != dia, per1=1:numper, hor1=1:numhor)+
#lambda*sum_expr(1 - sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor)-sum_expr(x[cri, esp1, funcio, dia1, per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:numdia, dia1=1:numdia, dia1!=dia)+
#O ATENDIMENTO DA CRIANCA i OCORRE NO MESMO DIA
# add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], per=1:numper, hor=1:numhor) <= 1 - sum_expr(x[cri, esp1, funcio1, dia1, per, hor], per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, funcio=1:numfuncio, funcio1=1:numfuncio, dia=1:numdia, dia1=1:numdia, dia1 != dia) %>%
#lambda*sum_expr(1 - sum_expr(x[cri, esp, funcio, dia, per, hor], per=1:numper, hor=1:numhor) - sum_expr(x[cri, esp1, funcio1, dia1, per, hor], per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, funcio=1:numfuncio, funcio1=1:numfuncio, dia=1:numdia, dia1=1:numdia, dia1 != dia)+
#cria um modelo
model <- MIPModel() %>%
#adiciona variaveis
add_variable(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor, type = "binary") %>%
#adiciona uma funcao objetivo
set_objective(lambda*sum_expr(1 - sum_expr(x[cri, esp, funcio, dia, per, hor], per=1:numper, hor=1:numhor) - sum_expr(x[cri, esp1, funcio1, dia1, per, hor], per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, funcio=1:numfuncio, funcio1=1:numfuncio, dia=1:numdia, dia1=1:numdia, dia1 != dia)+sum_expr(x[cri, esp, funcio, dia, per, hor], cri=1:numcri, esp=1:numesp, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor),"max") %>%
#adiciona a restricao de um medico por crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, funcio=1:numfuncio)<=1, cri=1:numcri, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao de uma crianca por medico
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], esp=1:numesp, cri=1:numcri)<=1, funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) %>%
#adiciona a restricao da quantidade de atendimento semanal da crianca
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, dia=1:numdia, per=1:numper, hor=1:numhor) <= AtSem[cri,esp], cri=1:numcri, esp=1:numesp) %>%
#O atendimento, quando realizado, ocorre em um único período e não há atendimentos consecutivos na mesma especialidade
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor) <= 1 - sum_expr(x[cri, esp1, funcio, dia, (per+1), hor], funcio=1:numfuncio, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:numdia, per=1:(numper-1)) %>%
#O atendimento da crianca não deve ocorrer em dias da semana consecutivos
add_constraint(sum_expr(x[cri, esp, funcio, dia, per, hor], funcio=1:numfuncio, hor=1:numhor, per=1:numper) <= 1 - sum_expr(x[cri, esp1, funcio, (dia+1), per, hor], funcio=1:numfuncio, per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, esp1=1:numesp, dia=1:(numdia-1)) %>%
#O atendimento da crianca i na especialidade e e feito por apenas um medico
add_constraint(sum_expr(x[cri, esp, funcio1, dia, per, hor], per=1:numper, hor=1:numhor) <= 1 - sum_expr(x[cri, esp, funcio, dia1, per, hor], per=1:numper, hor=1:numhor), cri=1:numcri, esp=1:numesp, dia=1:numdia, dia1=1:numdia, funcio1=1:numfuncio, funcio=1:numfuncio, funcio != funcio1) %>%
#usar o pacote lpsolve para resolver o problema
solve_model(with_ROI(solver = "lpsolve"))
#guarda a solucao encontrada no objeto sol
sol <- get_solution(model, x[cri, esp, funcio, dia, per, hor])
View(model)
View(sol)
